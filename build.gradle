buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        classpath "com.bmuschko:gradle-docker-plugin:7.2.0"
        classpath 'commons-io:commons-io:2.6'
        classpath 'joda-time:joda-time:2.10.13'
    }
}

plugins {
    id "com.bmuschko.docker-remote-api" version "7.2.0"
}

//tag::import[]
import org.joda.time.DateTime;
import com.bmuschko.gradle.docker.tasks.image.*

//end::import[]

group "${projectGroup}"

allprojects {
    apply plugin: 'idea'
}
//tag::extVariables[]
ext {
    isGrailsPlugin = name.startsWith('grails-plugin')
    isBuildSnapshot = projectVersion.toString().endsWith("-SNAPSHOT")
    commonBuild = new File(project.rootDir, "gradle").absolutePath
    dockerBuildDir = mkdir("${buildDir}/docker")
    dockerBuildGroup = 'Docker'
    dockerRegistry = 'index.docker.io'
    dockerRepo = 'myhab'
    tagId = "${projectVersion}"
    dockerTag = "${dockerRepo}:${tagId}" // <1>
}

//end::extVariables[]
//tag::prepareDocker[]
docker {
    registryCredentials {
        url = 'https://index.docker.io/v1/'
        def secret = file("${System.properties['user.home']}/.docker/hub.docker.com")
        if (secret.exists()) {
            username = secret.readLines().get(0)
            password = secret.readLines().get(1)
        }
    }
}
//tag::prepareDocker[]

subprojects { project ->
    version projectVersion
    group "${projectGroup}"

    ext {
        isGrailsApp = name.contains(project.name)
        isGrailsPlugin = name.startsWith('grails-plugin')
        isGrailsProject = isGrailsApp || isGrailsPlugin
        isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")

    }
}

task versionTxt() {
    doLast {
        new File("${projectDir}/src/main/docker", "version.txt").text = "${projectVersion}"
        def var = new Properties()
        def vueEnv = new File("${projectDir}/client/web-vue/.env")
        var.load(vueEnv.newDataInputStream())
        var.setProperty("VUE_APP_CONF_VERSION", "${projectVersion}")
        var.setProperty("VUE_APP_CONF_VERSION_BUILD_DATE", "${DateTime.now().toString("YYYY-MM-dd'T'HH:mm")}")
        def writer = new PrintWriter(new FileOutputStream(vueEnv))
        var.list(writer)
        writer.close()
        writer.flush()
    }
}
task copyClientResources(dependsOn: [/*':web-vue:build',*/ ':web-vue3:build']) { // <1>
    group = 'build'
    description = 'Copy client resources into server'
    doLast {
//        copy {
//            from project(':web-vue').buildDir.absolutePath
//            into "${project(':server-core').buildDir}/resources/main/public"
//        }
        copy {
            from project(':web-vue3').buildDir.absolutePath
            into "${project(':server-core').buildDir}/resources/main/public/nx"
        }
    }
}

task assembleServerAndClient(dependsOn: ['copyClientResources', 'versionTxt', ':server-core:assemble']) { // <2>
    group = 'build'
    description = 'Build combined server & web-vue JAR/WAR'

    doLast {
        copy {
            from fileTree(dir: "${project(':server-core').buildDir}/libs/") // <3>
            into "${buildDir}"
        }

        logger.quiet "JAR/WAR generated at $rootDir/build/. It combines the server and web-vue projects."
    }
}

copyClientResources.doFirst { // <4>
//    copy {
//        from "${project(':web-vue').projectDir}/dist"
//        into "${project(':server-core').buildDir}/resources/main/public"
//    }
    copy {
        from "${project(':web-vue3').projectDir}/dist/spa"
        into "${project(':server-core').buildDir}/resources/main/public/nx"
    }
}


task prepareDocker(type: Copy, dependsOn: assembleServerAndClient) { // <3>
    description = 'Copy files from src/main/docker and application jar to Docker temporal build directory'
    group = dockerBuildGroup
    into dockerBuildDir
    into(".") {
        from 'src/main/docker'
        from "${buildDir}/${projectName}-${projectVersion}.jar"
    }

    eachFile { logger.quiet("## ${it.file.absolutePath} | ${it.file.length()}") }
}
//end::prepareDocker[]

//tag::createDockerfile[]
task createDockerfile(type: Dockerfile, dependsOn: prepareDocker) { // <4>
    description = 'Create a Dockerfile file'
    group = dockerBuildGroup

    destFile = project.file("${dockerBuildDir}/Dockerfile")

    from 'openjdk:14'

    label(['project': 'myHAB'])
    label(['version': "${projectVersion}"])
    label(['org.opencontainers.image.authors': 'Dumitru Ciubenco "dumitru.ciubenco@gmail.com"'])

    exposePort 8181
    environmentVariable 'GRAILS_ENV', 'production'
    // Create a config directory and expose as volume.
    // External configuration files in this volume are automatically
    // picked up.
    runCommand 'mkdir -p /app/config'
    volume '/app/config'
    workingDir '/app'

    copyFile "${projectName}-${projectVersion}.jar", "${projectName}.jar"
    copyFile 'app-entrypoint.sh', 'app-entrypoint.sh' // <5>
    runCommand 'chmod +x app-entrypoint.sh'

    entryPoint '/app/app-entrypoint.sh' // <5>
}
//end::createDockerfile[]

//tag::buildImage[]
task buildImage(type: DockerBuildImage, dependsOn: createDockerfile) { // <6>
    description = 'Create Docker image to run the Grails application'
    group = dockerBuildGroup

    inputDir = file(dockerBuildDir)
    images.add("${githubSlug}:${tagId}")
}
task tagImage(type: DockerTagImage, dependsOn: buildImage) {
    description "Tag custom docker image."
    group = dockerBuildGroup
    targetImageId buildImage.getImageId()
    repository = "${githubSlug}".toString()
    tag = "${tagId}"
}

task pushImage(type: DockerPushImage, dependsOn: tagImage) {
    group = dockerBuildGroup
    description "Push custom docker image."

    images.add("${githubSlug}:${tagId}".toString())
}
//end::buildImage[]
task removeImage(type: DockerRemoveImage) {
    description = 'Remove Docker image with Grails application.'
    group = dockerBuildGroup
    targetImageId { dockerTag }
}
//apply from: "${commonBuild}/common-publishing.gradle"