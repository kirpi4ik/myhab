# This file was generated. Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type BradCrumbLink {
  id: String
  name: String
  type: String
}

type Cable {
  category: CableCategory
  code: String
  codeNew: String
  codeOld: String
  connectedTo: [DevicePort]
  description: String
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  id: Long
  maxAmp: Float
  nrWires: Int
  orderInRow: Int
  patchPanel: PatchPanel
  patchPanelPort: String
  peripherals: [DevicePeripheral]
  rack: Rack
  rackRowNr: Int
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
  zones: [Zone]
}

type CableCategory {
  cables: [Cable]
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  id: Long
  name: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
}

type CacheResult {
  cacheKey: String!
  cacheName: String!
  cachedValue: String
}

type Configuration {
  description: String
  entityId: Long
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  id: Long
  key: String
  name: String
  value: String
  version: Long
}

type ConfigurationDeleteByIdResult {
  error: String
  success: Boolean
}

type ConfigurationDeleteByKeyResult {
  error: String
  success: Boolean
}

type CronTrigger {
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  expression: String
  id: Long
  job: Job
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
}

type DeleteResponseCustom {
  error: String
  success: Boolean
}

"Whether or not the operation was successful"
type DeleteResult {
  error: String
  success: Boolean!
}

type Device {
  authAccounts: [DeviceAccount]
  backups: [DeviceBackup]
  code: String
  configurations: [Configuration]
  description: String
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  id: Long
  model: DeviceModel
  name: String
  networkAddress: NetworkAddressEmbedded
  offlineScenario: String
  ports: [DevicePort]
  rack: Rack
  status: DeviceStatus
  tsCreated: Date
  tsUpdated: Date
  type: DeviceCategory
  uid: String
  version: Long
  zones: [Zone]
}

type DeviceAccount {
  device: Device
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  id: Long
  isDefault: Boolean
  password: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
  username: String
  version: Long
}

type DeviceBackup {
  configuration: String
  device: Device
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  firmware: ByteArray
  frmVersion: String
  id: Long
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
}

type DeviceCategory {
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  id: Long
  name: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
}

type DevicePeripheral {
  accessTokens: [PeripheralAccessToken]
  category: PeripheralCategory
  configurations: [Configuration]
  connectedTo: [DevicePort]
  description: String
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  id: Long
  maxAmp: Float
  model: String
  name: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
  zones: [Zone]
}

type DevicePeripheralUpdateResult {
  error: String
  success: Boolean
}

type DevicePort {
  cables: [Cable]
  configurations: [Configuration]
  description: String
  device: Device
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  id: Long
  internalRef: String
  name: String
  peripherals: [DevicePeripheral]
  scenarios: [Scenario]
  state: PortState
  subscriptions: [EventSubscription]
  tsCreated: Date
  tsUpdated: Date
  type: PortType
  uid: String
  value: String
  version: Long
}

"Validation Errors"
type Error {
  field: String!
  message: String
}

type EventData {
  category: String
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  id: Long
  p0: String
  p1: String
  p2: String
  p3: String
  p4: String
  p5: String
  p6: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

type EventDataResponse {
  id: ID
  p0: String
  p1: String
  p2: String
  p3: String
  p4: String
  p5: String
  p6: String
  uid: String
}

type EventDefinition {
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  hasPublisher: Boolean
  hasSubscriber: Boolean
  id: Long
  name: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

type EventSubscription {
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  events: [EventDefinition]
  id: Long
  pubPort: DevicePort
  scenario: Scenario
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
}

type EventTrigger {
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  events: [EventDefinition]
  id: Long
  job: Job
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

type Job {
  cronTriggers: [CronTrigger]
  description: String
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  eventTriggers: [EventTrigger]
  id: Long
  name: String
  scenario: Scenario
  state: JobState
  tags: [JobTag]
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
}

type JobTag {
  "A list of validation errors on the entity"
  errors: [Error]
  id: Long
  jobs: [Job]
  name: String
  version: Long
}

type Layer {
  description: String
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  id: Long
  name: String
  peripherals: [DevicePeripheral]
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
}

type Mutation {
  addListItemProperty(description: String!, entityId: Long!, entityType: EntityType!, key: String!, value: String!): Configuration
  cableCategoryCreate(cableCategory: CableCategoryCreate): CableCategory
  cableCategoryDelete(id: Long!): DeleteResult
  cableCategoryUpdate(cableCategory: CableCategoryUpdate, id: Long!): CableCategory
  cableCreate(cable: CableCreate): Cable
  cableDelete(id: Long!): DeleteResult
  cableUpdate(cable: CableUpdate, id: Long!): Cable
  cacheDelete(cacheKey: String!, cacheName: String!): MutationResponse
  configDeleteByKey(entityId: Long!, entityType: EntityType!, key: String!): ConfigurationDeleteByKeyResult
  configurationCreate(configuration: ConfigurationCreate): Configuration
  configurationDelete(id: Long!): DeleteResult
  configurationUpdate(configuration: ConfigurationUpdate, id: Long!): Configuration
  deviceAccountCreate(deviceAccount: DeviceAccountCreate): DeviceAccount
  deviceAccountDelete(id: Long!): DeleteResult
  deviceAccountUpdate(deviceAccount: DeviceAccountUpdate, id: Long!): DeviceAccount
  deviceCategoryCreate(deviceCategory: DeviceCategoryCreate): DeviceCategory
  deviceCategoryDelete(id: Long!): DeleteResult
  deviceCategoryUpdate(deviceCategory: DeviceCategoryUpdate, id: Long!): DeviceCategory
  deviceCreate(device: DeviceCreate): Device
  deviceDelete(id: Long!): DeleteResult
  devicePeripheralCreate(devicePeripheral: DevicePeripheralCreate): DevicePeripheral
  devicePeripheralDelete(id: Long!): DeleteResult
  devicePeripheralUpdate(devicePeripheral: DevicePeripheralUpdate, id: Long!): DevicePeripheral
  devicePortCreate(devicePort: DevicePortCreate): DevicePort
  devicePortDelete(id: Long!): DeleteResult
  devicePortUpdate(devicePort: DevicePortUpdate, id: Long!): DevicePort
  deviceUpdate(device: DeviceUpdate, id: Long!): Device
  eventDataCreate(eventData: EventDataCreate): EventData
  eventDataDelete(id: Long!): DeleteResult
  eventDataUpdate(eventData: EventDataUpdate, id: Long!): EventData
  layerCreate(layer: LayerCreate): Layer
  layerDelete(id: Long!): DeleteResult
  layerUpdate(id: Long!, layer: LayerUpdate): Layer
  patchPanelCreate(patchPanel: PatchPanelCreate): PatchPanel
  patchPanelDelete(id: Long!): DeleteResult
  patchPanelUpdate(id: Long!, patchPanel: PatchPanelUpdate): PatchPanel
  peripheralCategoryCreate(peripheralCategory: PeripheralCategoryCreate): PeripheralCategory
  peripheralCategoryDelete(id: Long!): DeleteResult
  peripheralCategoryUpdate(id: Long!, peripheralCategory: PeripheralCategoryUpdate): PeripheralCategory
  portValueCreate(portValue: PortValueCreate): PortValue
  portValueDelete(id: Long!): DeleteResult
  portValueUpdate(id: Long!, portValue: PortValueUpdate): PortValue
  pushEvent(input: EventDatInput): EventDataResponse
  rackCreate(rack: RackCreate): Rack
  rackDelete(id: Long!): DeleteResult
  rackUpdate(id: Long!, rack: RackUpdate): Rack
  removeConfig(id: Long!): ConfigurationDeleteByIdResult
  roleCreate(role: RoleCreate): Role
  roleDelete(id: Long!): DeleteResult
  roleUpdate(id: Long!, role: RoleUpdate): Role
  savePropertyValue(entityId: Long!, entityType: EntityType!, key: String!, value: String!): Configuration
  scenarioCreate(scenario: ScenarioCreate): Scenario
  scenarioDelete(id: Long!): DeleteResult
  scenarioUpdate(id: Long!, scenario: ScenarioUpdate): Scenario
  timeSeriesStatisticCreate(timeSeriesStatistic: TimeSeriesStatisticCreate): TimeSeriesStatistic
  timeSeriesStatisticDelete(id: Long!): DeleteResult
  timeSeriesStatisticUpdate(id: Long!, timeSeriesStatistic: TimeSeriesStatisticUpdate): TimeSeriesStatistic
  updateCable(cable: CableUpdate!, id: Long!): Cable
  updatePeripheral(id: Long!, peripheral: DevicePeripheralUpdate!): DevicePeripheralUpdateResult
  updatePort(id: Long!, port: DevicePortUpdate!): DevicePort
  userCreate(user: UserCreate): User
  userDelete(id: Long!): DeleteResult
  userDeleteCascade(id: Long!): DeleteResponseCustom
  userRolesSave(input: SaveUserRoles): MutationResponse
  userUpdate(id: Long!, user: UserUpdate): User
  zoneCreate(zone: ZoneCreate): Zone
  zoneDelete(id: Long!): DeleteResult
  zoneUpdate(id: Long!, zone: ZoneUpdate): Zone
}

type MutationResponse {
  error: String
  success: Boolean
}

type Navigation {
  breadcrumb(id: String!, type: String!): [BradCrumbLink]
}

type NetworkAddressEmbedded {
  gateway: String
  ip: String
  port: String
}

type PatchPanel {
  cables: [Cable]
  description: String
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  id: Long
  name: String
  rack: Rack
  size: Int
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
}

type PeripheralAccessToken {
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  id: Long
  peripheral: DevicePeripheral
  token: String
  tsCreated: Date
  tsExpiration: Date
  tsUpdated: Date
  uid: String
  user: User
  version: Long
}

type PeripheralCategory {
  cables: [Cable]
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  id: Long
  name: String
  peripherals: [DevicePeripheral]
  title: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
}

type PortValue {
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  event: EventData
  id: Long
  portId: Long
  portUid: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
  value: String
}

type Query {
  cable(id: Long!): Cable
  cableById(id: String!): Cable
  cableCategory(id: Long!): CableCategory
  cableCategoryCount: Int
  cableCategoryList(ignoreCase: Boolean, max: Int, offset: Int, order: String, sort: String): [CableCategory]
  cableCount: Int
  cableList(ignoreCase: Boolean, max: Int, offset: Int, order: String, sort: String): [Cable]
  cache(cacheKey: String!, cacheName: String!): CacheResult
  cacheAll(cacheName: String): [CacheResult]
  config(key: String!): String
  configKeysByEntity(entityType: EntityType!): [String]
  configListByKey(entityId: Long!, entityType: EntityType!, key: String!): [Configuration]
  configPropertyByKey(entityId: Long!, entityType: EntityType!, key: String!): Configuration
  configuration(id: Long!): Configuration
  configurationCount: Int
  configurationList(ignoreCase: Boolean, max: Int, offset: Int, order: String, sort: String): [Configuration]
  configurationListByEntity(entityId: Long!, entityType: EntityType!): [Configuration]
  device(id: Long!): Device
  deviceAccount(id: Long!): DeviceAccount
  deviceAccountCount: Int
  deviceAccountList(ignoreCase: Boolean, max: Int, offset: Int, order: String, sort: String): [DeviceAccount]
  deviceById(id: String!): Device
  deviceCategory(id: Long!): DeviceCategory
  deviceCategoryCount: Int
  deviceCategoryList(ignoreCase: Boolean, max: Int, offset: Int, order: String, sort: String): [DeviceCategory]
  deviceCount: Int
  deviceList(ignoreCase: Boolean, max: Int, offset: Int, order: String, sort: String): [Device]
  deviceModelList: [String!]!
  devicePeripheral(id: Long!): DevicePeripheral
  devicePeripheralById(id: String!): DevicePeripheral
  devicePeripheralCount: Int
  devicePeripheralList(ignoreCase: Boolean, max: Int, offset: Int, order: String, sort: String): [DevicePeripheral]
  devicePort(id: Long!): DevicePort
  devicePortCount: Int
  devicePortList(ignoreCase: Boolean, max: Int, offset: Int, order: String, sort: String): [DevicePort]
  eventData(id: Long!): EventData
  eventDataCount: Int
  eventDataList(ignoreCase: Boolean, max: Int, offset: Int, order: String, sort: String): [EventData]
  eventsByP2(count: Int!, offset: Int!, p2: String!): [EventData]
  layer(id: Long!): Layer
  layerCount: Int
  layerList(ignoreCase: Boolean, max: Int, offset: Int, order: String, sort: String): [Layer]
  navigation: Navigation
  patchPanel(id: Long!): PatchPanel
  patchPanelCount: Int
  patchPanelList(ignoreCase: Boolean, max: Int, offset: Int, order: String, sort: String): [PatchPanel]
  peripheralCategory(id: Long!): PeripheralCategory
  peripheralCategoryCount: Int
  peripheralCategoryList(ignoreCase: Boolean, max: Int, offset: Int, order: String, sort: String): [PeripheralCategory]
  portStates: [String]
  portTypes: [String]
  portValue(id: Long!): PortValue
  portValueCount: Int
  portValueList(ignoreCase: Boolean, max: Int, offset: Int, order: String, sort: String): [PortValue]
  rack(id: Long!): Rack
  rackCount: Int
  rackList(ignoreCase: Boolean, max: Int, offset: Int, order: String, sort: String): [Rack]
  role(id: Long!): Role
  roleCount: Int
  roleList(ignoreCase: Boolean, max: Int, offset: Int, order: String, sort: String): [Role]
  scenario(id: Long!): Scenario
  scenarioCount: Int
  scenarioList(ignoreCase: Boolean, max: Int, offset: Int, order: String, sort: String): [Scenario]
  statLatestByKey(key: String!): TimeSeriesStatistic
  statLatestByKeys(keys: [String!]): [TimeSeriesStatistic]
  timeSeriesStatistic(id: Long!): TimeSeriesStatistic
  timeSeriesStatisticCount: Int
  timeSeriesStatisticList(ignoreCase: Boolean, max: Int, offset: Int, order: String, sort: String): [TimeSeriesStatistic]
  user(id: Long!): User
  userById(id: String!): User
  userCount: Int
  userList(ignoreCase: Boolean, max: Int, offset: Int, order: String, sort: String): [User]
  userRolesForUser(userId: String!): [UserRole]
  zone(id: Long!): Zone
  zoneById(id: String!): Zone
  zoneCount: Int
  zoneList(ignoreCase: Boolean, max: Int, offset: Int, order: String, sort: String): [Zone]
  zonesByParentId(id: String!): [Zone]
  zonesRoot: [Zone]
}

type Rack {
  cables: [Cable]
  description: String
  devices: [Device]
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  id: Long
  name: String
  patchPanels: [PatchPanel]
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
  zone: Zone
}

type Role {
  authority: String
  "A list of validation errors on the entity"
  errors: [Error]
  id: Long
  version: Long
}

type Scenario {
  body: String
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  id: Long
  name: String
  ports: [DevicePort]
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
}

type TimeSeriesStatistic {
  deltaDiff: Float
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  id: Long
  key: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
  value: Float
  version: Long
}

type User {
  accountExpired: Boolean
  accountLocked: Boolean
  email: String
  enabled: Boolean
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  favJobs: [Job]
  firstName: String
  id: Long
  lastName: String
  name: String
  password: String
  passwordExpired: Boolean
  peripheralAccessTokens: [PeripheralAccessToken]
  phoneNr: String
  telegramUsername: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
  username: String
}

type UserRole {
  roleId: ID!
  userId: ID!
}

type Zone {
  cables: [Cable]
  categories: [String]
  configurations: [Configuration]
  description: String
  devices: [Device]
  entityType: EntityType
  "A list of validation errors on the entity"
  errors: [Error]
  id: Long
  name: String
  parent: Zone
  peripherals: [DevicePeripheral]
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
  zones: [Zone]
}

enum DeviceModel {
  CAM_ONVIF
  ELECTRIC_METER_DTS
  ESP32
  ESP8266_1
  MEGAD_2561_RTC
  NIBE_F1145_8_EM
  TMEZON_INTERCOM
}

enum DeviceStatus {
  DISABLED
  OFFLINE
  ONLINE
}

enum EntityType {
  CABLE
  CABLE_CATEGORY
  CONFIG
  DEVICE
  EVENT_DATA
  PATCH_PANEL
  PERIPHERAL
  PERIPHERAL_CATEGORY
  PORT
  PORT_VALUE
  RACK
  TS_STATISTIC
  USER
  ZONE
}

enum JobState {
  ACTIVE
  DISABLED
  DRAFT
}

enum PortState {
  ACTIVE
  CONFIGURED
  INACTIVE
  UNKNOW
}

enum PortType {
  ADC
  BINARY_SENSOR
  DSEN
  I2C
  IN
  NOT_CONFIGURED
  OUT
  SENSOR
  SWITCH
  UNKNOW
}

"Built-in ByteArray"
scalar ByteArray

"Built-in Date"
scalar Date

"A 64-bit signed integer"
scalar Long

input CableCategoryCreate {
  cables: [CableCreateNested!]
  entityType: EntityType
  name: String!
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input CableCategoryCreateNested {
  cables: [CableCreateNested]
  entityType: EntityType
  id: Long
  name: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input CableCategoryUpdate {
  cables: [CableUpdateNested]
  entityType: EntityType
  name: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
}

input CableCategoryUpdateNested {
  cables: [CableUpdateNested]
  entityType: EntityType
  id: Long
  name: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input CableCreate {
  category: CableCategoryCreateNested
  code: String!
  codeNew: String
  codeOld: String
  connectedTo: [DevicePortCreateNested!]
  description: String!
  entityType: EntityType
  maxAmp: Float
  nrWires: Int
  orderInRow: Int
  patchPanel: PatchPanelCreateNested
  patchPanelPort: String
  peripherals: [DevicePeripheralCreateNested!]
  rack: RackCreateNested
  rackRowNr: Int
  tsCreated: Date
  tsUpdated: Date
  uid: String
  zones: [ZoneCreateNested!]
}

input CableCreateNested {
  code: String
  codeNew: String
  codeOld: String
  description: String
  entityType: EntityType
  id: Long
  maxAmp: Float
  nrWires: Int
  orderInRow: Int
  patchPanelPort: String
  peripherals: [DevicePeripheralCreateNested]
  rackRowNr: Int
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input CableUpdate {
  category: CableCategoryUpdateNested
  code: String
  codeNew: String
  codeOld: String
  connectedTo: [DevicePortUpdateNested]
  description: String
  entityType: EntityType
  maxAmp: Float
  nrWires: Int
  orderInRow: Int
  patchPanel: PatchPanelUpdateNested
  patchPanelPort: String
  peripherals: [DevicePeripheralUpdateNested]
  rack: RackUpdateNested
  rackRowNr: Int
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
  zones: [ZoneUpdateNested]
}

input CableUpdateNested {
  code: String
  codeNew: String
  codeOld: String
  description: String
  entityType: EntityType
  id: Long
  maxAmp: Float
  nrWires: Int
  orderInRow: Int
  patchPanelPort: String
  peripherals: [DevicePeripheralUpdateNested]
  rackRowNr: Int
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input ConfigurationCreate {
  description: String
  entityId: Long!
  entityType: EntityType!
  key: String!
  name: String
  value: String!
}

input ConfigurationCreateNested {
  description: String
  entityId: Long
  entityType: EntityType
  id: Long
  key: String
  name: String
  value: String
}

input ConfigurationUpdate {
  description: String
  entityId: Long
  entityType: EntityType
  key: String
  name: String
  value: String
  version: Long
}

input ConfigurationUpdateNested {
  description: String
  entityId: Long
  entityType: EntityType
  id: Long
  key: String
  name: String
  value: String
}

input CronTriggerCreateNested {
  entityType: EntityType
  expression: String
  id: Long
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input CronTriggerUpdateNested {
  entityType: EntityType
  expression: String
  id: Long
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input DeviceAccountCreate {
  device: DeviceCreateNested!
  entityType: EntityType
  isDefault: Boolean
  password: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
  username: String
}

input DeviceAccountCreateNested {
  entityType: EntityType
  id: Long
  isDefault: Boolean
  password: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
  username: String
}

input DeviceAccountUpdate {
  device: DeviceUpdateNested
  entityType: EntityType
  isDefault: Boolean
  password: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
  username: String
  version: Long
}

input DeviceAccountUpdateNested {
  entityType: EntityType
  id: Long
  isDefault: Boolean
  password: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
  username: String
}

input DeviceBackupCreateNested {
  configuration: String
  entityType: EntityType
  firmware: ByteArray
  frmVersion: String
  id: Long
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input DeviceBackupUpdateNested {
  configuration: String
  entityType: EntityType
  firmware: ByteArray
  frmVersion: String
  id: Long
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input DeviceCategoryCreate {
  entityType: EntityType
  name: String!
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input DeviceCategoryCreateNested {
  entityType: EntityType
  id: Long
  name: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input DeviceCategoryUpdate {
  entityType: EntityType
  name: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
}

input DeviceCategoryUpdateNested {
  entityType: EntityType
  id: Long
  name: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input DeviceCreate {
  authAccounts: [DeviceAccountCreateNested!]
  backups: [DeviceBackupCreateNested!]
  code: String!
  description: String
  entityType: EntityType
  model: DeviceModel
  name: String
  networkAddress: NetworkAddressCreateEmbedded
  offlineScenario: String
  ports: [DevicePortCreateNested!]
  rack: RackCreateNested
  status: DeviceStatus
  tsCreated: Date
  tsUpdated: Date
  type: DeviceCategoryCreateNested
  uid: String
  zones: [ZoneCreateNested!]
}

input DeviceCreateNested {
  authAccounts: [DeviceAccountCreateNested]
  backups: [DeviceBackupCreateNested]
  code: String
  description: String
  entityType: EntityType
  id: Long
  model: DeviceModel
  name: String
  networkAddress: NetworkAddressCreateEmbedded
  offlineScenario: String
  ports: [DevicePortCreateNested]
  status: DeviceStatus
  tsCreated: Date
  tsUpdated: Date
  type: DeviceCategoryCreateNested
  uid: String
}

input DevicePeripheralCreate {
  accessTokens: [PeripheralAccessTokenCreateNested!]
  category: PeripheralCategoryCreateNested!
  connectedTo: [DevicePortCreateNested!]
  description: String
  entityType: EntityType
  maxAmp: Float
  model: String
  name: String!
  tsCreated: Date
  tsUpdated: Date
  uid: String
  zones: [ZoneCreateNested!]
}

input DevicePeripheralCreateNested {
  accessTokens: [PeripheralAccessTokenCreateNested]
  description: String
  entityType: EntityType
  id: Long
  maxAmp: Float
  model: String
  name: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input DevicePeripheralUpdate {
  accessTokens: [PeripheralAccessTokenUpdateNested]
  category: PeripheralCategoryUpdateNested
  connectedTo: [DevicePortUpdateNested]
  description: String
  entityType: EntityType
  maxAmp: Float
  model: String
  name: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
  zones: [ZoneUpdateNested]
}

input DevicePeripheralUpdateNested {
  accessTokens: [PeripheralAccessTokenUpdateNested]
  description: String
  entityType: EntityType
  id: Long
  maxAmp: Float
  model: String
  name: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input DevicePortCreate {
  cables: [CableCreateNested!]
  description: String
  device: DeviceCreateNested!
  entityType: EntityType
  internalRef: String!
  name: String
  peripherals: [DevicePeripheralCreateNested!]
  scenarios: [ScenarioCreateNested!]
  state: PortState
  subscriptions: [EventSubscriptionCreateNested!]
  tsCreated: Date
  tsUpdated: Date
  type: PortType
  uid: String
  value: String
}

input DevicePortCreateNested {
  description: String
  entityType: EntityType
  id: Long
  internalRef: String
  name: String
  peripherals: [DevicePeripheralCreateNested]
  scenarios: [ScenarioCreateNested]
  state: PortState
  subscriptions: [EventSubscriptionCreateNested]
  tsCreated: Date
  tsUpdated: Date
  type: PortType
  uid: String
  value: String
}

input DevicePortUpdate {
  cables: [CableUpdateNested]
  description: String
  device: DeviceUpdateNested
  entityType: EntityType
  internalRef: String
  name: String
  peripherals: [DevicePeripheralUpdateNested]
  scenarios: [ScenarioUpdateNested]
  state: PortState
  subscriptions: [EventSubscriptionUpdateNested]
  tsCreated: Date
  tsUpdated: Date
  type: PortType
  uid: String
  value: String
  version: Long
}

input DevicePortUpdateNested {
  description: String
  entityType: EntityType
  id: Long
  internalRef: String
  name: String
  peripherals: [DevicePeripheralUpdateNested]
  scenarios: [ScenarioUpdateNested]
  state: PortState
  subscriptions: [EventSubscriptionUpdateNested]
  tsCreated: Date
  tsUpdated: Date
  type: PortType
  uid: String
  value: String
}

input DeviceUpdate {
  authAccounts: [DeviceAccountUpdateNested]
  backups: [DeviceBackupUpdateNested]
  code: String
  description: String
  entityType: EntityType
  model: DeviceModel
  name: String
  networkAddress: NetworkAddressUpdateEmbedded
  offlineScenario: String
  ports: [DevicePortUpdateNested]
  rack: RackUpdateNested
  status: DeviceStatus
  tsCreated: Date
  tsUpdated: Date
  type: DeviceCategoryUpdateNested
  uid: String
  version: Long
  zones: [ZoneUpdateNested]
}

input DeviceUpdateNested {
  authAccounts: [DeviceAccountUpdateNested]
  backups: [DeviceBackupUpdateNested]
  code: String
  description: String
  entityType: EntityType
  id: Long
  model: DeviceModel
  name: String
  networkAddress: NetworkAddressUpdateEmbedded
  offlineScenario: String
  ports: [DevicePortUpdateNested]
  status: DeviceStatus
  tsCreated: Date
  tsUpdated: Date
  type: DeviceCategoryUpdateNested
  uid: String
}

input EventDatInput {
  p0: String
  p1: String
  p2: String
  p3: String
  p4: String
  p5: String
  p6: String
}

input EventDataCreate {
  category: String
  entityType: EntityType
  p0: String!
  p1: String!
  p2: String!
  p3: String!
  p4: String
  p5: String
  p6: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input EventDataCreateNested {
  category: String
  entityType: EntityType
  id: Long
  p0: String
  p1: String
  p2: String
  p3: String
  p4: String
  p5: String
  p6: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input EventDataUpdate {
  category: String
  entityType: EntityType
  p0: String
  p1: String
  p2: String
  p3: String
  p4: String
  p5: String
  p6: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input EventDataUpdateNested {
  category: String
  entityType: EntityType
  id: Long
  p0: String
  p1: String
  p2: String
  p3: String
  p4: String
  p5: String
  p6: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input EventDefinitionCreateNested {
  entityType: EntityType
  hasPublisher: Boolean
  hasSubscriber: Boolean
  id: Long
  name: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input EventDefinitionUpdateNested {
  entityType: EntityType
  hasPublisher: Boolean
  hasSubscriber: Boolean
  id: Long
  name: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input EventSubscriptionCreateNested {
  entityType: EntityType
  events: [EventDefinitionCreateNested]
  id: Long
  scenario: ScenarioCreateNested
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input EventSubscriptionUpdateNested {
  entityType: EntityType
  events: [EventDefinitionUpdateNested]
  id: Long
  scenario: ScenarioUpdateNested
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input EventTriggerCreateNested {
  entityType: EntityType
  events: [EventDefinitionCreateNested]
  id: Long
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input EventTriggerUpdateNested {
  entityType: EntityType
  events: [EventDefinitionUpdateNested]
  id: Long
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input JobCreateNested {
  cronTriggers: [CronTriggerCreateNested]
  description: String
  entityType: EntityType
  eventTriggers: [EventTriggerCreateNested]
  id: Long
  name: String
  scenario: ScenarioCreateNested
  state: JobState
  tags: [JobTagCreateNested]
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input JobTagCreateNested {
  id: Long
  name: String
}

input JobTagUpdateNested {
  id: Long
  name: String
}

input JobUpdateNested {
  cronTriggers: [CronTriggerUpdateNested]
  description: String
  entityType: EntityType
  eventTriggers: [EventTriggerUpdateNested]
  id: Long
  name: String
  scenario: ScenarioUpdateNested
  state: JobState
  tags: [JobTagUpdateNested]
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input LayerCreate {
  description: String!
  entityType: EntityType
  name: String!
  peripherals: [DevicePeripheralCreateNested!]
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input LayerUpdate {
  description: String
  entityType: EntityType
  name: String
  peripherals: [DevicePeripheralUpdateNested]
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
}

input NetworkAddressCreateEmbedded {
  gateway: String
  ip: String!
  port: String!
}

input NetworkAddressUpdateEmbedded {
  gateway: String
  ip: String
  port: String
}

input PatchPanelCreate {
  cables: [CableCreateNested!]
  description: String!
  entityType: EntityType
  name: String!
  rack: RackCreateNested!
  size: Int
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input PatchPanelCreateNested {
  cables: [CableCreateNested]
  description: String
  entityType: EntityType
  id: Long
  name: String
  size: Int
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input PatchPanelUpdate {
  cables: [CableUpdateNested]
  description: String
  entityType: EntityType
  name: String
  rack: RackUpdateNested
  size: Int
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
}

input PatchPanelUpdateNested {
  cables: [CableUpdateNested]
  description: String
  entityType: EntityType
  id: Long
  name: String
  size: Int
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input PeripheralAccessTokenCreateNested {
  entityType: EntityType
  id: Long
  token: String
  tsCreated: Date
  tsExpiration: Date
  tsUpdated: Date
  uid: String
}

input PeripheralAccessTokenUpdateNested {
  entityType: EntityType
  id: Long
  token: String
  tsCreated: Date
  tsExpiration: Date
  tsUpdated: Date
  uid: String
}

input PeripheralCategoryCreate {
  cables: [CableCreateNested!]
  entityType: EntityType
  name: String!
  peripherals: [DevicePeripheralCreateNested!]
  title: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input PeripheralCategoryCreateNested {
  cables: [CableCreateNested]
  entityType: EntityType
  id: Long
  name: String
  peripherals: [DevicePeripheralCreateNested]
  title: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input PeripheralCategoryUpdate {
  cables: [CableUpdateNested]
  entityType: EntityType
  name: String
  peripherals: [DevicePeripheralUpdateNested]
  title: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
}

input PeripheralCategoryUpdateNested {
  cables: [CableUpdateNested]
  entityType: EntityType
  id: Long
  name: String
  peripherals: [DevicePeripheralUpdateNested]
  title: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input PortValueCreate {
  entityType: EntityType
  event: EventDataCreateNested
  portId: Long
  portUid: String!
  tsCreated: Date
  tsUpdated: Date
  uid: String
  value: String!
}

input PortValueUpdate {
  entityType: EntityType
  event: EventDataUpdateNested
  portId: Long
  portUid: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
  value: String
}

input RackCreate {
  cables: [CableCreateNested!]
  description: String
  devices: [DeviceCreateNested!]
  entityType: EntityType
  name: String
  patchPanels: [PatchPanelCreateNested!]
  tsCreated: Date
  tsUpdated: Date
  uid: String
  zone: ZoneCreateNested
}

input RackCreateNested {
  cables: [CableCreateNested]
  description: String
  devices: [DeviceCreateNested]
  entityType: EntityType
  id: Long
  name: String
  patchPanels: [PatchPanelCreateNested]
  tsCreated: Date
  tsUpdated: Date
  uid: String
  zone: ZoneCreateNested
}

input RackUpdate {
  cables: [CableUpdateNested]
  description: String
  devices: [DeviceUpdateNested]
  entityType: EntityType
  name: String
  patchPanels: [PatchPanelUpdateNested]
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
  zone: ZoneUpdateNested
}

input RackUpdateNested {
  cables: [CableUpdateNested]
  description: String
  devices: [DeviceUpdateNested]
  entityType: EntityType
  id: Long
  name: String
  patchPanels: [PatchPanelUpdateNested]
  tsCreated: Date
  tsUpdated: Date
  uid: String
  zone: ZoneUpdateNested
}

input RoleCreate {
  authority: String!
}

input RoleUpdate {
  authority: String
  version: Long
}

input SaveUserRoles {
  userId: String!
  userRoles: [UserRoleRef]
}

input ScenarioCreate {
  body: String!
  entityType: EntityType
  name: String
  ports: [DevicePortCreateNested!]
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input ScenarioCreateNested {
  body: String
  entityType: EntityType
  id: Long
  name: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input ScenarioUpdate {
  body: String
  entityType: EntityType
  name: String
  ports: [DevicePortUpdateNested]
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
}

input ScenarioUpdateNested {
  body: String
  entityType: EntityType
  id: Long
  name: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
}

input TimeSeriesStatisticCreate {
  deltaDiff: Float
  entityType: EntityType
  key: String!
  tsCreated: Date
  tsUpdated: Date
  uid: String
  value: Float!
}

input TimeSeriesStatisticUpdate {
  deltaDiff: Float
  entityType: EntityType
  key: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
  value: Float
  version: Long
}

input UserCreate {
  accountExpired: Boolean!
  accountLocked: Boolean!
  email: String
  enabled: Boolean!
  entityType: EntityType
  favJobs: [JobCreateNested!]
  firstName: String
  lastName: String
  password: String!
  passwordExpired: Boolean!
  peripheralAccessTokens: [PeripheralAccessTokenCreateNested!]
  phoneNr: String
  telegramUsername: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
  username: String!
}

input UserRoleRef {
  roleId: ID!
  userId: ID!
}

input UserUpdate {
  accountExpired: Boolean
  accountLocked: Boolean
  email: String
  enabled: Boolean
  entityType: EntityType
  favJobs: [JobUpdateNested]
  firstName: String
  lastName: String
  password: String
  passwordExpired: Boolean
  peripheralAccessTokens: [PeripheralAccessTokenUpdateNested]
  phoneNr: String
  telegramUsername: String
  tsCreated: Date
  tsUpdated: Date
  uid: String
  username: String
}

input ZoneCreate {
  cables: [CableCreateNested!]
  categories: [String!]
  configurations: [ConfigurationCreate]
  description: String!
  devices: [DeviceCreateNested!]
  entityType: EntityType
  name: String!
  parent: ZoneCreateNested!
  peripherals: [DevicePeripheralCreateNested!]
  tsCreated: Date
  tsUpdated: Date
  uid: String
  zones: [ZoneCreateNested!]
}

input ZoneCreateNested {
  categories: [String]
  configurations: [ConfigurationCreateNested]
  description: String
  entityType: EntityType
  id: Long
  name: String
  peripherals: [DevicePeripheralCreateNested]
  tsCreated: Date
  tsUpdated: Date
  uid: String
  zones: [ZoneCreateNested]
}

input ZoneUpdate {
  cables: [CableUpdateNested]
  categories: [String]
  configurations: [ConfigurationUpdate]
  description: String
  devices: [DeviceUpdateNested]
  entityType: EntityType
  name: String
  parent: ZoneUpdateNested
  peripherals: [DevicePeripheralUpdateNested]
  tsCreated: Date
  tsUpdated: Date
  uid: String
  version: Long
  zones: [ZoneUpdateNested]
}

input ZoneUpdateNested {
  categories: [String]
  configurations: [ConfigurationUpdateNested]
  description: String
  entityType: EntityType
  id: Long
  name: String
  peripherals: [DevicePeripheralUpdateNested]
  tsCreated: Date
  tsUpdated: Date
  uid: String
  zones: [ZoneUpdateNested]
}
